const Components = require('../../components.json');
const path = require('path');
const fs = require('fs');
const uppercamelcase = require('uppercamelcase');
const pkg = require('../../package.json');

const OUTPUT_PATH = path.join(__dirname, '../../types/wd-vue.d.ts');
const basepath = path.join(__dirname, '../../types/');
const importComponentTemplate = [];
const listTemplate = []

function fileExists (filePath) {
  try {
    return fs.statSync(filePath).isFile();
  } catch (err) {
    return false;
  }
}

Object.keys(Components).forEach(name => {
  const componentName = uppercamelcase(name);
  // check
  const filePath = path.resolve(basepath, `${name}.d.ts`);
  if (!fileExists(filePath)) {
    fs.writeFileSync(filePath, '', 'utf8');
    throw new Error(`types: 遗漏 ${name} 组件类型定义文件`);

  }


  const importPath = `./${name}`;
  if (['message', 'notification', 'confirm'].includes(name)) {
    return;
  }
  importComponentTemplate.push(
    `import { ${componentName} } from '${importPath}';`
  );
  listTemplate.push(componentName);
});

const importStr = importComponentTemplate.join('\n');
const listStr = listTemplate.join(',\n  ');

const template = `/* Automatically generated by './build/bin/build-ts.js' */
${importStr}
import { Confirm as WDConfirm } from './confirm';
import {
  Message as WDMessage,
  MessageOptions
} from './message';
import {
  Notification as WDNotification,
  NotificationOptions
} from './notification';
import { FormRule, FormRules } from './form';
import CollapseTransition from './collapse-transition';

export const Message: WDMessage;
export const Notification: WDNotification;
export const Confirm: WDConfirm;

export {
  ${listStr},
  FormRule,
  FormRules,
  NotificationOptions,
  MessageOptions,
  CollapseTransition,
};

export declare function install(vue: any): void;

declare module 'vue/types/vue' {
  interface Vue {
    $wd: {
      confirm: WDConfirm
      message: WDMessage
      notify: WDNotification
    }
  }
}
`;
fs.writeFileSync(OUTPUT_PATH, template);
console.log('[build entry] DONE:', OUTPUT_PATH);
